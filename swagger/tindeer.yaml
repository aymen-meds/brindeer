openapi: 3.0.0
info:
  title: Tindeer API
  description: Notre super API pour notre application mobile de rencontre de Rennes
  version: 1.0.0
servers:
  - url: http://localhost:9080/api/v1
    description: Environnement de test Docker
  - url: http://localhost:9090/api/v1
    description: Environnement de test local
components:
  securitySchemes:
    oAuthSample:
      type: oauth2
      description: This API uses OAuth 2 with the implicit grant flow. [More info](https://api.example.com/docs/auth)
      flows:
        authorizationCode:
          authorizationUrl: http://keycloak:8080/realms/tindeer/protocol/openid-connect/auth
          tokenUrl: http://keycloak:8080/realms/tindeer/protocol/openid-connect/token
          scopes:
            profile: access profile
            email: access email
  schemas:
    GeoCoordinates:
      type: object
      properties:
        latitude:
          type: number
          format: double
        longitude:
          type: number
          format: double
    MatchedUser:
      type: object
      properties:
        idMatchedUser:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        geoCoordinates:
          $ref: '#/components/schemas/GeoCoordinates'
    ProfileDto:
  type: object
  required:
    - userId
  properties:
    id:
      type: string
      description: Unique identifier for the Profile
    userId:
      type: string
      description: User identifier, must not be empty
    mail:
      type: string
      format: email
      description: Email address of the user
    age:
      type: integer
      format: int32
      minimum: 13
      description: Age of the user, must be at least 13
    firstName:
      type: string
      description: First name of the user
    lastName:
      type: string
      description: Last name of the user
    created:
      type: string
      format: 'date-time'
      description: Date and time when the profile was created, in YYYY-MM-DD HH:mm:ss format
    modified:
      type: string
      format: 'date-time'
      description: Date and time when the profile was last modified, in YYYY-MM-DD HH:mm:ss format
security:
  - oAuthSample:
      - profile
      - email
paths:
  /profiles/current:
    get:
      summary: Retourne le profil courant de l'utilisateur
      security:
        - oAuthSample:
            - profile
      responses:
        '200':
          description: Profil d'utilisateur courant retourné avec succès
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MatchedUser'
  /match/create:
    post:
      summary: Crée un nouveau profil d'utilisateur avec géolocalisation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GeoCoordinates'
      responses:
        '201':
          description: Profil d'utilisateur créé avec succès
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MatchedUser'
        '400':
          description: Données invalides fournies
  /match/{id}:
    get:
      summary: Retourne le profil d'utilisateur spécifié par ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Profil d'utilisateur trouvé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MatchedUser'
        '404':
          description: Profil d'utilisateur non trouvé
    put:
      summary: Met à jour le profil d'utilisateur spécifié par ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GeoCoordinates'
      responses:
        '200':
          description: Profil d'utilisateur mis à jour avec succès
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MatchedUser'
        '400':
          description: Données invalides fournies
        '404':
          description: Profil d'utilisateur non trouvé
  /match/nearby:
    get:
      summary: Retourne les profils d'utilisateurs à proximité
      security:
        - oAuthSample:
            - profile
      responses:
        '200':
          description: Liste des profils d'utilisateurs à proximité retournée avec succès
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MatchedUser'
  /profiles:
    post:
      summary: Crée un nouveau profil
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProfileDto'
      responses:
        '201':
          description: Profil créé avec succès
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileDto'
  /profiles/profile:
    get:
      summary: Retourne le profil de l'utilisateur courant
      responses:
        '200':
          description: Profil d'utilisateur courant retourné avec succès
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileDto'
  /profiles/update:
    put:
      summary: Met à jour le profil d'un utilisateur
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProfileDto'
      responses:
        '200':
          description: Profil d'utilisateur mis à jour avec succès
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileDto'
  /profiles/search:
    get:
      summary: Recherche des profils basés sur une requête
      parameters:
        - name: query
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Liste des profils correspondants
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProfileDto'
  /profiles/{mail}:
    get:
      summary: Recherche des profils par mail
      parameters:
        - name: mail
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Liste des profils correspondants par mail
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProfileDto'